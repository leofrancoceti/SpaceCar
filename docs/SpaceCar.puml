@startuml SpaceCar

class Obstaculo {
    -texture : sf::Texture
    -sprite : sf::Sprite
    -buffer : sf::SoundBuffer
    -crashSound : sf::Sound
    -hitCount : int
    -scaleX : float
    -scaleY : float
    +Obstaculo(float posX = 0.f, float posY = 0.f)
    +~Obstaculo()
    +playCrashSound()
    +takeHit()
    +getHitCount() const : int
    +getSprite() : sf::Sprite&
}

class Caja
class Charco

class Juego {
    -window : sf::RenderWindow*
    -jugador : Jugador*
    -obstaculos : std::vector<Obstaculo>
    -puntaje : Puntaje*
    +Juego()
    +~Juego()
    +update()
    +render()
    +run()
}

class Jugador {
    +Jugador(float posX, float posY)
    +update(sf::RenderWindow* window)
    +render(sf::RenderWindow* target)
    +getBounds() const : sf::FloatRect
}

class Carro {
    -carro : sf::Sprite
    -texture : sf::Texture
    -speed : double
    +Carro(bool isPlayer, float posX, float posY)
    +update(sf::RenderWindow* window)
    +render(sf::RenderWindow* target)
    +getBounds() const : sf::FloatRect
}

class Puntaje {
    -font : sf::Font
    -puntajeText : sf::Text
    -puntaje : int
    +Puntaje()
    +~Puntaje()
    +aggPuntuacion(int puntos)
    +updateText()
    +draw(sf::RenderWindow &window)
    +getPuntaje() const : int
    +resetPuntaje()
}

class Vida {
    +Restablecer()
}

class Partida {
    +tiempo : float
    +Iniciar()
    +Perder()
}

class Velocidad {
    +Alta()
    +Baja()
}

class Colisionable {
    +DetectarColision()
}

Juego "1" *-- "1" Jugador
Juego "1" *-- "1" Partida 
Juego "1" *-- "1" Puntaje
Juego "1" *-- "*" Obstaculo

Jugador "1" o-- "1" Carro
Jugador "1" *-- "1" Vida
Jugador "1" *-- "1" Puntaje

Partida "1" *-- "*" Obstaculo

Charco --|> Obstaculo
Caja --|> Obstaculo

Obstaculo --|> Colisionable
Carro --|> Colisionable

@enduml